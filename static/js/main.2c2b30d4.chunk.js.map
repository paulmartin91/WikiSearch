{"version":3,"sources":["searchBar.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchInput","react_default","a","createElement","className","id","style","marginTop","onChange","updateState","onClick","callAPI","React","Component","App","lib_default","delay","index","key","name","description","bind","assertThisInitialized","wikiName","wikiDescription","wikiLink","event","setState","target","value","_this2","searchTerm","fetch","method","then","results","json","response","_this3","cards","map","x","y","Card","link","searchBar","backgroundColor","arguments","length","undefined","Math","floor","random","colorArr","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c2b30d4.chunk.js","sourcesContent":["import React from 'react'\n\nclass SearchBar extends React.Component{\nconstructor(props){\n    super(props)\n    this.state ={\n    searchInput: \"\",\n    }\n}\n\nrender(){\n\n    return(\n        <div className=\"searchBox\">         {/*searchbox can be one component*/}\n        <h1>Searching Wikipedia for... <p>{this.state.searchInput}</p></h1>\n        <input id=\"searchBar\" style={{marginTop: 10}} onChange={this.props.updateState}></input>\n        <button id = \"searchButton\" onClick={this.props.callAPI}> Search </button>\n         </div>  \n    )\n}\n\n} \n\nexport default SearchBar","import React from 'react';\nimport FadeIn from 'react-fade-in';\n\nconst App = (props) => {\n\n    return(\n        <FadeIn delay={props.index*200}>\n        <li key={props.key}\n        className=\"listTab\">\n        <h1>\n        {props.name}\n        </h1>\n        <p> \n        - {props.description}\n        </p>\n    </li>\n    </FadeIn>\n    )\n}\n\nexport default App;","import React from 'react';\nimport './App.css';\nimport { all } from 'q';\nimport SearchBar from './searchBar.js'\nimport Card from './Card.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateState = this.updateState.bind(this);\n    this.callAPI = this.callAPI.bind(this);\n    \n     this.state = {\n      wikiName: [],\n      wikiDescription: [],\n      wikiLink: [],\n     }\n      \n  }\n  updateState(event){\n    this.setState({\n      searchInput: event.target.value\n    })\n  }\n\n  callAPI(){\n    if(this.state.searchInput !== \"\"){\n    let searchTerm = this.state.searchInput;\n fetch(\"https://en.wikipedia.org/w/api.php?action=opensearch&origin=*&search=\" + searchTerm + \"&format=json&gsrlimit=15\", {method: \"Get\"})\n      .then(results => results.json())\n      .then( response => \n   this.setState({\n        wikiName: response[1],\n        wikiDescription: response[2],\n        wikiLink: response[3]\n      })\n   )\n  }\n}\n  \n  render() { \n      \n    const colorArr = (colors = [\n      '#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \n          '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n          '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \n          '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n          '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \n          '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n          '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \n          '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n          '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \n          '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'\n    ]) => colors[Math.floor(Math.random() * 51)]\n\n      const cards = this.state.wikiName.map((x, y)=> {\n        return(\n            <Card \n            key={x}\n            link={this.state.wikiLink[y]}\n            description={this.state.wikiDescription[y]}\n            name = {x}\n            index = {y}\n            />\n        )\n      } \n\n      \n\n    )\n      \n    return (\n      <section className=\"all\">\n      <SearchBar\n      style={{backgroundColor: colorArr()}}\n      updateState={this.updateState} \n      callAPI={this.callAPI}\n      />\n      {cards}\n      </section>   \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}